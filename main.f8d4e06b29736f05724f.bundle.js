/*! For license information please see main.f8d4e06b29736f05724f.bundle.js.LICENSE.txt */
(()=>{var e,t={747:(e,t,s)=>{"use strict";s.r(t),s.d(t,{default:()=>v});var n=s(379),i=s.n(n),r=s(795),a=s.n(r),o=s(569),c=s.n(o),u=s(565),l=s.n(u),h=s(216),d=s.n(h),p=s(589),m=s.n(p),y=s(656),f={};f.styleTagTransform=m(),f.setAttributes=l(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),i()(y.Z,f);const v=y.Z&&y.Z.locals?y.Z.locals:void 0},419:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MainAnims=void 0,t.MainAnims=function(e){e.anims.create({key:"swanky_dance",frames:e.anims.generateFrameNames("swanky_velvet",{prefix:"fr",start:3,end:5,zeroPad:2}),frameRate:8,repeat:-1,yoyo:!0})}},940:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PlayerAnims=void 0,t.PlayerAnims=function(e){e.anims.create({key:"sv_idleFront",frames:e.anims.generateFrameNames("player",{prefix:"fr",start:0,end:2,zeroPad:2}),frameRate:4,repeat:-1,yoyo:!0}),e.anims.create({key:"sv_idleBack",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[10,18,19],zeroPad:2}),frameRate:4,repeat:-1,yoyo:!0}),e.anims.create({key:"sv_idleRight",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[5,6,7,6],zeroPad:2}),frameRate:4,repeat:-1}),e.anims.create({key:"sv_idleLeft",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[13,14,15,14],zeroPad:2}),frameRate:4,repeat:-1}),e.anims.create({key:"sv_walkRight",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[6,8,6,9],zeroPad:2}),frameRate:4,repeat:-1}),e.anims.create({key:"sv_walkLeft",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[13,16,13,17],zeroPad:2}),frameRate:4,repeat:-1}),e.anims.create({key:"sv_walkFront",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[0,3,0,4],zeroPad:2}),frameRate:4,repeat:-1}),e.anims.create({key:"sv_walkBack",frames:e.anims.generateFrameNames("player",{prefix:"fr",frames:[10,11,10,12],zeroPad:2}),frameRate:4,repeat:-1})}},666:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),s(260),s(747);const i=s(955),r=s(952),a=s(846),o=s(197),c=s(317),u=s(233),l=s(463),h=s(117),d=s(289),p=s(939);class m{constructor(e){this.audio=a.AudioManager,this.data=r.GameData,this.game=l.Game,this.type=Phaser.WEBGL,this.transparent=!0,this.parent="game",this.backgroundColor="#898989",this.pixelArt=!0,this.scale={mode:e.mode,autoCenter:e.position,width:e.width,height:e.height,min:{width:e.min.width,height:e.min.height},max:{width:e.max.width,height:e.max.height},scaleRatio:0,parentBottom:{},sizerBottom:{}},this.dom={createContainer:!0},this.input={virtual:!0,gamepad:!0,type:e.inputType,mode:"A"},this.interfaces=[new u.HUD,new c.Controller],this.scene=[new o.Boot,new h.Preload,new p.MainMenu,...l.Game.scene,...this.interfaces],this.ui=new d.UI}refreshApp(){return n(this,void 0,void 0,(function*(){return i.System.Process.app.gameData=new r.GameData,i.System.Process.app.gameData}))}}t.default=m,window.addEventListener("load",(()=>{i.System.Process.app=new m(i.System.Process),i.System.Process.game=new Phaser.Game(i.System.Process.app)}))},846:function(e,t){"use strict";var s=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AudioManager=void 0;class n{static play(e,t,s,i,r){let a=s||1,o=i||0,c=r||0;n.cached.push(t),n.cached.filter((s=>{n.sound=e.sound.add(t),n.sound.setLoop(o).setVolume(a).setDetune(c),s.toString()===t&&n.cached.splice(n.cached.indexOf(t),1),n.sound.play()}))}static stop(e,t){for(let s of t.sound.sounds)s.key==e&&s.stop()}static getStageTheme(e){return s(this,void 0,void 0,(function*(){return""}))}}t.AudioManager=n,n.noAudio=!1,n.default=!1,n.sound=null,n.cached=[],n.music={track:"",fadeIn:(e,t,s)=>{for(let e of s.sound.sounds)e.key===n.music.track&&s.tweens.add({targets:e,volume:{value:0,ease:"Power1",duration:500}});let i=s.sound.add(e).setLoop(!0).setVolume(0);s.tweens.add({targets:i,volume:{value:t,ease:"Power1",duration:3e3},onStart:()=>i.play()})},fadeOut:(e,t,s)=>{for(let i of s.sound.sounds)i.key===e&&s.tweens.add({targets:i,volume:{value:0,ease:"Power1",duration:3e3},onComplete:()=>{n.music.play(s),s.tweens.add({targets:i,volume:{value:t,ease:"Power1",duration:3e3}}),i.stop(),s.sound.removeByKey(i)}})},play:e=>s(void 0,void 0,void 0,(function*(){const t=yield n.getStageTheme(e.data.currentStage);n.music.track=t,e.sound.add(t).setLoop(!0).setVolume(.8).play()}))}},955:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.System=void 0,function(e){class t{constructor(){this.min={width:0,height:0},this.max={width:0,height:0},this.orientation={on:(e,s,n)=>{if(null!==typeof screen.orientation&&void 0!==screen.orientation&&t.mobileAndTabletCheck())return screen.orientation.addEventListener(e,s,n)},off:(e,s,n)=>{if(screen.orientation&&t.mobileAndTabletCheck())return screen.orientation.removeEventListener(e,s,n)},lock:e=>{if(null!==typeof screen.orientation.lock&&void 0!==screen.orientation&&t.mobileAndTabletCheck())return screen.orientation.lock(e)},unlock:()=>{if(null!==typeof screen.orientation.unlock&&void 0!==screen.orientation&&t.mobileAndTabletCheck())return screen.orientation.unlock()}},this.app=null,this.parent="game",this.key="",this.utils=null,this.mode=null,this.setup={key:"",physics:{default:"arcade",arcade:{gravity:{y:0},useTicker:!0,debug:!1},matter:{gravity:{y:3},Body:null,Bodies:null,debug:!1}}};const{Body:e,Bodies:s}=Phaser.Physics.Matter.Matter;this.setup.physics.matter.Body=e,this.setup.physics.matter.Bodies=s,t.mobileAndTabletCheck()?(this.inputType="touch",this.mode=Phaser.Scale.RESIZE,this.position=Phaser.Scale.NO_CENTER,this.width=innerWidth,this.height=innerHeight,this.min.width=240,this.min.height=480,this.max.width=3e3,this.max.height=1400):(this.inputType="generic",this.mode=Phaser.Scale.RESIZE,this.position=Phaser.Scale.CENTER_HORIZONTALLY,this.width=1150,this.height=2e3)}static mobileAndTabletCheck(){let e=!1;var t;return t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e}static isDesktop(s){return!!(!t.mobileAndTabletCheck()&&e.Config.isLandscape(s)||e.Process.width>540)}static isLandscape(e){return"landscape-primary"===e.scale.orientation.toString()||"landscape-secondary"===e.scale.orientation.toString()||"landscape"===e.scale.orientation.toString()}static isPortrait(e){return"portrait-primary"===e.scale.orientation.toString()||"portrait-primary"===e.scale.orientation.toString()||"portrait"===e.scale.orientation.toString()}static vibrate(e){navigator.vibrate=navigator.vibrate||navigator.webkitVibrate||navigator.mozVibrate||navigator.msVibrate,navigator.vibrate,navigator.vibrate(e)}static makeTransparantBackground(e){e.scene.stop("Background");let t=document.getElementById("game");null!==t&&(t.getElementsByTagName("canvas")[0].style.backgroundColor="transparent")}}e.Config=t,e.Process=new t}(t.System||(t.System={}))},463:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Game=void 0;const i=s(324),r=s(228),a=s(876),o=s(764),c=s(402),u=s(365);class l{static init(e){return n(this,void 0,void 0,(function*(){this.groups={player:e.physics.add.group({runChildUpdate:!0}),door:e.physics.add.group({runChildUpdate:!0})},l.enemies=[],r.MapManager.init(e),u.Camera.init(e),c.SpawnManager.init(e)}))}}t.Game=l,l.maps=r.MapManager,l.playerOverworld=a.PlayerOverworld,l.playerPlatformer=o.PlayerPlatformer,l.spawns=c.SpawnManager,l.camera=u.Camera,l.scene=[new i.GamePlay]},228:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.MapManager=void 0;const i=s(955),r=s(541),a=s(869),o=s(69);class c{static addRects(e){c.currentMap.getObjectLayer("bounds").objects.map((t=>{if("matter"===e)c.scene.matter.add.rectangle(t.x+t.width/2,t.y+t.height/2,t.width,t.height,{isStatic:!0,collisionFilter:{group:2}});else{const e=this.scene.add.rectangle(t.x+t.width/2,t.y+t.height/2,t.width,t.height);this.scene.physics.world.enable(e),e.body.immovable=!0,this.scene.physics.add.collider(i.System.Process.app.game.groups.player,e)}}))}static init(e){return n(this,void 0,void 0,(function*(){switch(c.scene=e,c.currentStage=e.data.currentStage,c.currentMap=c.currentStage.includes("Overworld")?e.add.tilemap(c.currentStage):e.make.tilemap({key:c.currentStage}).setCollisionByProperty({collides:!0}),c.currentStage){case"Bar_Overworld":(0,r.Bar_Overworld)(e);break;case"Cave_Overworld":(0,o.Cave_Overworld)(e);break;case"Cave_Platformer":(0,a.Cave_Platformer)(e)}c.currentStage.includes("Overworld")?c.addRects():c.addRects("matter"),e.physics.world.bounds.width=c.currentMap.widthInPixels,e.physics.world.bounds.height=c.currentMap.heightInPixels,e.cameras.main.setBounds(0,0,i.System.Process.app.game.maps.currentMap.widthInPixels,i.System.Process.app.game.maps.currentMap.heightInPixels)}))}}t.MapManager=c},289:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.UI=void 0;const i=s(955);t.UI=class{constructor(){}listen(e,t,s){const n=(e,t)=>{e.scene.settings.visible=!1,i.System.Process.app.ui.resize(e,t),null!==s&&s(e)},r=(e,t)=>{e.scene.settings.active&&n(e,t)};n(e,t),e.scale.on("resize",(()=>r(e,t)),e),screen.orientation.addEventListener("change",(()=>r(e,t))),screen.orientation.addEventListener("webkitfullscreenchange",(()=>r(e,t)))}callSizer(e){this.parent=new Phaser.Structs.Size(e.scale.gameSize.width,e.scale.gameSize.height).setSize(e.scale.gameSize.width,e.scale.gameSize.height),this.sizer=new Phaser.Structs.Size(e.cameras.main.width,e.cameras.main.height,Phaser.Structs.Size.FIT,this.parent).setSize(e.scale.gameSize.width,e.scale.gameSize.height)}checkOrientation(e,t){switch(t){case"Preload":return[!i.System.Config.isDesktop(e)&&i.System.Config.isLandscape(e)?1400:e.cameras.main.width,!i.System.Config.isDesktop(e)&&i.System.Config.isLandscape(e)?1800:e.cameras.main.height];case"Controller":return[e.cameras.main.width,e.cameras.main.height];case"Modal":return[450,800];case"HUD":return[!i.System.Config.isDesktop(e)&&i.System.Config.isLandscape(e)?1400:740,!i.System.Config.isDesktop(e)&&i.System.Config.isLandscape(e)?1800:960];case"PauseMenu":return i.System.Config.isDesktop(e)?[2200,980]:i.System.Config.isLandscape(e)?[1700,1200]:[800,1200];default:return null}}getPosition(e,t){return n(this,void 0,void 0,(function*(){switch(t){case"Controller":case"Mini":return[e.cameras.main.width/2,e.cameras.main.height/2,!1];case"Preload":return i.System.Config.isDesktop(e)?[e.cameras.main.width/2,e.cameras.main.height/3.5,!1]:[i.System.Config.isLandscape(e)?180:e.cameras.main.width/2,i.System.Config.isLandscape(e)?e.cameras.main.height/2:e.cameras.main.height/3.5,!1];case"Modal":return[i.System.Config.isDesktop(e)?200:e.cameras.main.width/2,i.System.Config.isDesktop(e)?e.cameras.main.height/2:e.cameras.main.height/2.5,!1];case"HUD":return[!i.System.Config.isDesktop(e)&&i.System.Config.isLandscape(e)?e.cameras.main.width/3.5:e.cameras.main.width/2,e.cameras.main.height/2,!1];case"PauseMenu":return i.System.Config.isLandscape(e)?[i.System.Config.isDesktop(e)?30:420,i.System.Config.isDesktop(e)?e.cameras.main.height/2.4:650,!!i.System.Config.isDesktop(e)]:[e.cameras.main.width/2,i.System.Config.isDesktop(e)?e.cameras.main.height/2:e.cameras.main.height/2.5,!1];default:return[0,0,!1]}}))}setCamera(e,t,s,n){if(!0===n){let t=i.System.Config.isDesktop(e)?40:e.cameras.main.height>400?140:e.cameras.main.width/2-150;e.cameras.main.setPosition(t,screenTop),i.System.Config.isDesktop(e)||e.cameras.main.setZoom(Math.min(this.sizer.width/e.cameras.main.width,this.sizer.height/e.cameras.main.height))}else e.cameras.main.setViewport(Math.ceil(.5*(this.parent.width-this.sizer.width)),screenTop,this.sizer.width,this.sizer.height).setZoom(Math.max(this.sizer.width/e.cameras.main.width,this.sizer.height/e.cameras.main.height)).centerOn(t,s);e.scene.settings.visible=!0}resize(e,t){const s=this.checkOrientation(e,t);s&&(e.cameras.main.width=s[0],e.cameras.main.height=s[1],this.callSizer(e),setTimeout((()=>n(this,void 0,void 0,(function*(){const s=yield this.getPosition(e,t);this.setCamera(e,s[0],s[1],s[2])}))),300))}}},365:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Camera=void 0;const n=s(955);class i{static setZoom(e){return n.System.Config.isDesktop(e)?1:.85}static checkZoom(e){!1===e.scene.get("Controller").toggleZoom&&e.cameras.main.setZoom(n.System.Config.isDesktop(e)?1.2:1)}static init(e){e.data.currentStage.includes("Overworld")?(e.cameras.main.setZoom(1.5),e.data.currentStage===n.System.Process.app.game.currentStage||n.System.Process.app.game.maps.currentMap.getLayer("world").properties.find((e=>e.name="singleView"))?e.cameras.main.setZoom(4):e.time.delayedCall(3e3,(()=>{e.cameras.main.zoomTo(4,2e3),n.System.Process.app.game.currentStage=e.data.currentStage}))):e.cameras.main.zoomTo(1.5,500).fadeIn(2e3,0,0,0).setBounds(0,0,n.System.Process.app.game.maps.currentMap.widthInPixels,n.System.Process.app.game.maps.currentMap.heightInPixels)}static panFromPlayer(e,t,s){i.isFollowing=!1,e.cameras.main.pan(t,s,500,"Power2").stopFollow(e.player.focalPoint).zoomTo(i.setZoom(e),1500)}static followPlayer(e,t){if(!n.System.Process.app.game.gameState||!0===n.System.Process.app.game.cutScene||!0===n.System.Process.app.game.fightBoss)return;const s=()=>{this.checkZoom(e),e.cameras.main.startFollow(t.focalPoint);let s=n.System.Config.isLandscape(e)&&n.System.Config.isDesktop(e)?t.y-50:t.y;t.focalPoint.setPosition(t.x,s)};!1===i.isFollowing?(e.cameras.main.pan(e.player.x,e.player.y,800),e.time.delayedCall(800,(()=>{e.cameras.main.setZoom(1),s(),i.isFollowing=!0}))):s()}}t.Camera=i,i.isFollowing=!1},952:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GameData=void 0;const i=s(955);class r{constructor(){this.currentStage="Cave_Overworld",this.spawnPoint="start"}static get completed(){i.System.Process.app.gameData;const e=[];return e.filter((e=>!0===e)).length/e.length*100}static setGameSchema(e,t,s){return n(this,void 0,void 0,(function*(){const n={config:t};return i.System.Process.app.gameData=n.config,console.log(`retrieved data from ${e} storage.`),s&&s(i.System.Process.app.gameData),i.System.Process.app.gameData}))}static retrieveExternal(e){return n(this,void 0,void 0,(function*(){const t=yield i.System.Process.app.ajax.xhr("retrieve-external","POST",{username:i.System.Process.app.account.username,webtoken:localStorage.getItem("webtoken")});return null!==t.account?(i.System.Process.app.account.loggedIn=!0,i.System.Process.app.account.username=t.account.user.username,i.System.Process.app.account.paid=t.account.user.paid,yield r.setGameSchema("remote",t.account.data,e)):e?e(i.System.Process.app.gameData):null}))}static dataCheck(){return n(this,void 0,void 0,(function*(){const e=localStorage.getItem("save"),t=null!==e&&JSON.parse(e);return new Promise((e=>n(this,void 0,void 0,(function*(){return!0===i.System.Process.app.account.loggedIn?yield r.retrieveExternal(e):t?yield r.setGameSchema("local",t,e):void e(null)}))))}))}}t.GameData=r},899:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Inputs=void 0;const n=s(955);t.Inputs=class{constructor(e){this.ee=e.events,this.joystick={A:{self:null}},this.pauseMenu={isPaused:!1,cursorPos:0},this.currentInput={type:null},this.states={left:!1,right:!1,up:!1,down:!1,A:!1,B:!1,C:!1,D:!1,enter:!1,start:!1,select:!1},this.buttons={A:null,B:null,C:null,D:null,left:null,up:null,right:null,down:null,select:null,start:null,arrows:{up:null,down:null,left:null,right:null}},this.actionInputs=["A","B","C","D"],this.directionalInputs=["left","right","up","down"],this.optionInputs=["start","select"],this.refresh={default:()=>{for(let[e,t]of Object.entries(this.currentInput))t=!1}}}get state(){for(let[e,t]of Object.entries(this.states))if(!0===t)return e}_applyButton(e){if(this.actionInputs.includes(e))for(let e in this.directionalInputs)this.states[this.directionalInputs[e]]=!1;switch(e){case"start":this.states.start=!0;break;case"select":this.states.select=!0;break;case"enter":this.states.enter=!0;break;case"left":this.states.left=!0;break;case"right":this.states.right=!0;break;case"up":this.states.up=!0;break;case"down":this.states.down=!0}(this.states.A||this.states.B||this.states.C||this.states.D)&&this.directionalInputs.includes(e)&&(this.states[e]=!1)}_releaseButton(e){(this.directionalInputs.includes(e)||this.actionInputs.includes(e)||this.optionInputs.includes(e))&&(this.states[e]=!1);for(let[e,t]of Object.entries(this.currentInput))t=!1}virtualControls(e){const t=e.plugins.get("rexvirtualjoystickplugin");e.input.addPointer(1),this.joystick.A.base=e.add.circle(100,450,50,0).setAlpha(.5),this.joystick.A.thumb=e.add.circle(100,450,30,13421772).setAlpha(.5),this.joystick.A.self=t.add(e,{forceX:0,forceY:0,x:100,y:450,radius:60,base:this.joystick.A.base,thumb:this.joystick.A.thumb}),this.buttons.A=e.add.circle(e.scale.width-80,500,20,0).setAlpha(.5).setInteractive(),this.buttons.B=e.add.circle(e.scale.width-100,550,20,0).setAlpha(.5).setInteractive(),e.events.on("update",(()=>{e.scene.settings.active&&null!==this.joystick.A.self&&(this.joystick.A.self.forceX<-40&&(this.states.left=!0),this.joystick.A.self.forceX>40&&(this.states.right=!0),this.joystick.A.self.forceY<-40&&(this.states.up=!0),this.joystick.A.self.forceY>40&&(this.states.down=!0),0===this.joystick.A.self.forceX&&0===this.joystick.A.self.forceY&&(this._releaseButton("left"),this._releaseButton("right"),this._releaseButton("up"),this._releaseButton("down")))}))}keyboardControls(e){e.input.keyboard.clearCaptures().on("keydown-SPACE",(()=>this._applyButton("start")),!1).on("keyup-SPACE",(()=>this._releaseButton("start")),!1).on("keydown-SHIFT",(()=>this._applyButton("select")),!1).on("keyup-SHIFT",(()=>this._releaseButton("select")),!1).on("keydown-UP",(()=>this._applyButton("up")),!1).on("keyup-UP",(()=>this._releaseButton("up")),!1).on("keydown-DOWN",(()=>this._applyButton("down")),!1).on("keyup-DOWN",(()=>this._releaseButton("down")),!1).on("keydown-LEFT",(()=>this._applyButton("left")),!1).on("keyup-LEFT",(()=>this._releaseButton("left")),!1).on("keydown-RIGHT",(()=>this._applyButton("right")),!1).on("keyup-RIGHT",(()=>this._releaseButton("right")),!1).on("keydown-S",(()=>this._applyButton("A")),!1).on("keyup-S",(()=>this._releaseButton("A")),!1).on("keydown-D",(()=>this._applyButton("B")),!1).on("keyup-D",(()=>this._releaseButton("B")),!1).on("keydown-W",(()=>this._applyButton("C")),!1).on("keyup-W",(()=>this._releaseButton("C")),!1).on("keydown-A",(()=>this._applyButton("D")),!1).on("keyup-A",(()=>this._releaseButton("D")),!1).on("keydown-ENTER",(()=>this._applyButton("enter")),!1)}gamepadControls(e){e.input.gamepad.on("down",((e,t,s)=>{!0===n.System.Process.app.game.gameState&&!1===n.System.Process.app.game.cutScene&&(9===t.index&&this._applyButton("start"),8===t.index&&this._applyButton("select"),e.left&&this._applyButton("left"),e.right&&this._applyButton("right"),(e.up||e.L2)&&this._applyButton("up"),(e.down||e.L1)&&this._applyButton("down"),"A"===n.System.Process.app.input.mode?((e.A||e.R1)&&this._applyButton("A"),(e.B||e.R2)&&this._applyButton("B"),e.Y&&this._applyButton("C"),e.X&&this._applyButton("D")):((e.B||e.R1)&&this._applyButton("A"),(e.A||e.R2)&&this._applyButton("B"),e.X&&this._applyButton("C"),e.Y&&this._applyButton("D")))})).on("up",((e,t,s)=>{this._releaseButton("start"),this._releaseButton("select"),this._releaseButton("left"),this._releaseButton("right"),this._releaseButton("up"),this._releaseButton("down"),this._releaseButton("A"),this._releaseButton("B"),this._releaseButton("C"),this._releaseButton("D")}))}}},615:function(e,t){"use strict";var s=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.parseResources=void 0,t.parseResources=function(e,t){return s(this,void 0,void 0,(function*(){if(t.hasOwnProperty("image"))for(let s in t.image){let n=Object.keys(t.image[s]).find((e=>e));for(let i in t.image[s]){let r=t.image[s][i];e.load.image(n,r)}}if(t.hasOwnProperty("audio"))for(let s in t.audio){let n=Object.keys(t.audio[s]).find((e=>e));for(let i in t.audio[s]){let r=t.audio[s][i];e.load.audio(n,r)}}if(t.hasOwnProperty("atlas"))for(let s in t.atlas){let n=Object.keys(t.atlas[s]).find((e=>e));for(let i in t.atlas[s]){let r=t.atlas[s][i][0],a=t.atlas[s][i][1];e.load.atlas(n,r,a)}}if(t.hasOwnProperty("spritesheet"))for(let s in t.spritesheet){let n=Object.keys(t.spritesheet[s]).find((e=>e));for(let i in t.spritesheet[s]){let r=t.spritesheet[s][i][0],a=t.spritesheet[s][i][1];e.load.spritesheet(n,r,{frameWidth:a.frameWidth,frameHeight:a.frameHeight})}}if(t.hasOwnProperty("tilemapTiledJSON"))for(let s in t.tilemapTiledJSON){let n=Object.keys(t.tilemapTiledJSON[s]).find((e=>e));for(let i in t.tilemapTiledJSON[s]){let r=t.tilemapTiledJSON[s][i];e.load.tilemapTiledJSON(n,r)}}}))}},541:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bar_Overworld=void 0;const n=s(228);t.Bar_Overworld=function(e){n.MapManager.tileset=n.MapManager.currentMap.addTilesetImage("bar venue good"),n.MapManager.currentMap.createLayer("floor",n.MapManager.tileset,0,0),n.MapManager.currentMap.createLayer("world",n.MapManager.tileset,0,0)}},69:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cave_Overworld=void 0;const n=s(955),i=s(228);t.Cave_Overworld=function(e){i.MapManager.tileset=i.MapManager.currentMap.addTilesetImage("tiles");let t=[],s=e.add.zone(304,1056,30,40).setName("door1"),r=e.add.zone(608,912,30,40).setName("door2"),a=e.add.zone(608,848,30,40).setName("door3"),o=e.add.zone(1232,1136,30,40).setName("door4"),c=e.add.zone(1392,208,30,40).setName("door5"),u=e.add.zone(608,704,30,40).setName("door6"),l=e.add.zone(384,704,30,40).setName("door7"),h=e.add.zone(192,336,30,40).setName("door8");t.push(s,r,a,o,c,u,l,h);for(let e in t)n.System.Process.app.game.groups.door.add(t[e]),t[e].body.moves=!1;i.MapManager.currentMap.createLayer("floor",i.MapManager.tileset,0,0),i.MapManager.currentMap.createLayer("shadow_floor",i.MapManager.tileset,0,0),i.MapManager.currentMap.createLayer("world",i.MapManager.tileset,0,0),i.MapManager.currentMap.createLayer("shadow_world",i.MapManager.tileset,0,0),i.MapManager.currentMap.createLayer("objects_above",i.MapManager.tileset,0,0).setDepth(1/0),i.MapManager.currentMap.createLayer("objects_below",i.MapManager.tileset,0,0)}},869:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cave_Platformer=void 0;const n=s(228);t.Cave_Platformer=function(e){e.add.image(500,300,"background").setScrollFactor(0).setScale(5);const t=n.MapManager.currentMap.addTilesetImage("platformer");n.MapManager.currentMap.createLayer("world",t,0,0)}},876:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.PlayerOverworld=void 0;const i=s(955);class r extends Phaser.Physics.Arcade.Sprite{constructor(e,t,s,n){super(e,t,s,"player"),e.add.existing(this),e.physics.add.existing(this),i.System.Process.app.game.groups.player.add(this),this.play("sv_idleFront",!0).setCollideWorldBounds(!0).setSize(20,10).setOffset(5,40).setFlipX(n),e.scene.run("Controller",this),this.controls=e.scene.get("Controller"),e.events.on("update",(()=>this.update()))}applyState(e){return n(this,void 0,void 0,(function*(){if("idle"===e){const e=()=>n(this,void 0,void 0,(function*(){switch(this.anims.currentAnim.key){case"sv_walkFront":return"sv_idleFront";case"sv_walkBack":return"sv_idleBack";case"sv_walkRight":return"sv_idleRight";case"sv_walkLeft":return"sv_idleLeft"}})),t=yield e();void 0!==t&&this.play(t,!0),this.setVelocity(0,0)}}))}update(){return n(this,void 0,void 0,(function*(){this.active&&(this.body.velocity.y>0&&this.anims.play("sv_walkFront",!0),this.body.velocity.y<0&&this.anims.play("sv_walkBack",!0),0===this.body.velocity.y&&this.body.velocity.x<0&&this.anims.play("sv_walkLeft",!0),0===this.body.velocity.y&&this.body.velocity.x>0&&this.anims.play("sv_walkRight",!0),this.controls.inputs.states.left&&this.setVelocityX(-50),this.controls.inputs.states.right&&this.setVelocityX(50),this.controls.inputs.states.up&&this.setVelocityY(-50),this.controls.inputs.states.down&&this.setVelocityY(50),this.controls.inputs.states.left||this.controls.inputs.states.right||this.controls.inputs.states.up||this.controls.inputs.states.down||this.applyState("idle"))}))}}t.PlayerOverworld=r},764:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.PlayerPlatformer=void 0;const i=s(955);class r extends Phaser.Physics.Matter.Sprite{constructor(e,t,s,n){super(e.matter.world,t,s,"player"),this.collisionFilter={mask:16777215,group:-1,collidesWith:-1},this.isTouching={left:!1,right:!1,ground:!1},e.add.existing(this),e.physics.add.existing(this),this.play("sv_idleRight",!0).setFlipX(n).setScale(2).setCollisionGroup(-1),this.sensors={top:i.System.Process.setup.physics.matter.Bodies.circle(this.x,this.y-10,10),bottom:i.System.Process.setup.physics.matter.Bodies.circle(this.x,this.y+50,30),left:i.System.Process.setup.physics.matter.Bodies.rectangle(this.x-5,this.y+14,5,30),right:i.System.Process.setup.physics.matter.Bodies.rectangle(this.x+5,this.y+14,5,30)},this.compoundBody=i.System.Process.setup.physics.matter.Body.create({parts:[this.sensors.bottom,this.sensors.top,this.sensors.left,this.sensors.right],frictionStatic:.5}),this.setExistingBody(this.compoundBody),this.setOrigin(.5).setDepth(101).setPosition(this.x,this.y).setFixedRotation().setIgnoreGravity(!1),e.scene.run("Controller",this),this.controls=e.scene.get("Controller"),e.events.on("update",(()=>this.update()))}applyState(e){return n(this,void 0,void 0,(function*(){if("idle"===e){const e=()=>n(this,void 0,void 0,(function*(){switch(this.anims.currentAnim.key){case"sv_walkFront":return"sv_idleFront";case"sv_walkBack":return"sv_idleBack";case"sv_walkRight":return"sv_idleRight";case"sv_walkLeft":return"sv_idleLeft"}})),t=yield e();void 0!==t&&this.play(t,!0)}}))}update(){return n(this,void 0,void 0,(function*(){this.active&&(this.controls.inputs.states.left&&(this.setVelocityX(-5),this.anims.play("sv_walkLeft",!0)),this.controls.inputs.states.right&&(this.setVelocityX(5),this.anims.play("sv_walkRight",!0)),this.controls.inputs.states.up?(this.setVelocityY(-15),this.applyForce(new Phaser.Math.Vector2(0,0))):this.applyForce(new Phaser.Math.Vector2(0,0)),this.controls.inputs.states.left||this.controls.inputs.states.right||this.controls.inputs.states.up||this.controls.inputs.states.down||this.applyState("idle"))}))}}t.PlayerPlatformer=r},197:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Boot=void 0;const r=s(955),a=i(s(782)),o=i(s(839));class c extends Phaser.Scene{constructor(){super("Boot")}init(){return n(this,void 0,void 0,(function*(){this.gameData=yield r.System.Process.app.refreshApp(),document.addEventListener("fullscreenchange",(()=>this.cameras.main.centerOn(this.cameras.main.width/2,this.cameras.main.height/2)))}))}preload(){return n(this,void 0,void 0,(function*(){this.load.json("resources_main",a.default),this.load.plugin("rexvirtualjoystickplugin",o.default,!0)}))}create(){return n(this,void 0,void 0,(function*(){this.add.text(0,0,"",{fontSize:"1px",fontFamily:"Digitizer"}).setAlpha(0),this.time.delayedCall(500,(()=>{const e=new Phaser.Scenes.Systems(this,this.gameData);this.scene.run("Preload",e.config)}))}))}initFullscreen(){!this.scale.isFullscreen&&this.scale.fullscreen.available&&(this.scale.fullscreenTarget=document.getElementById(r.System.Process.app.parent),this.scale.startFullscreen())}}t.Boot=c},317:(e,t,s)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Controller=void 0;const n=s(955),i=s(899);class r extends Phaser.Scene{constructor(){super("Controller"),this.inputs=new i.Inputs(this)}create(){n.System.Config.mobileAndTabletCheck()?this.inputs.virtualControls(this):this.inputs.keyboardControls(this),n.System.Process.app.ui.listen(this,"Controller",this.resizeWindow)}resizeWindow(e){e.scene.settings.active&&!1!==n.System.Process.app.input.virtual&&setTimeout((()=>{"touch"===n.System.Process.app.input.type&&(null!==e.inputs.buttons.A&&e.inputs.buttons.A.setPosition(.76*e.cameras.main.width,e.cameras.main.height/2+20),null!==e.inputs.buttons.B&&e.inputs.buttons.B.setPosition(.9*e.cameras.main.width,e.cameras.main.height/2+80),null!==e.inputs.joystick.A&&e.inputs.joystick.A.self.setPosition(100,n.System.Config.isPortrait(e)?450:200))}),200)}}t.Controller=r},324:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GamePlay=void 0;const i=s(955),r=s(575),a=s(956),o=s(271);class c extends Phaser.Scene{constructor(){i.System.Process.setup.key="GamePlay",super(i.System.Process.setup)}init(e){this.data=e,i.System.Process.app.game.levelType=e.currentStage.includes("Overworld")?"overworld":"platformer"}create(){return n(this,void 0,void 0,(function*(){switch(yield i.System.Process.app.game.init(this),this.data.currentStage){case"Bar_Overworld":(0,r.Bar_Overworld)(this);break;case"Cave_Overworld":(0,a.Cave_Overworld)(this);break;case"Cave_Platformer":(0,o.Cave_Platformer)(this)}}))}}t.GamePlay=c},233:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HUD=void 0;class s extends Phaser.Scene{constructor(){super("HUD")}create(){}update(){}}t.HUD=s},117:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Preload=void 0;const i=s(615),r=s(940),a=s(419);class o extends Phaser.Scene{constructor(){super({key:"Preload"})}init(e){this.data=e}preload(){return n(this,void 0,void 0,(function*(){yield(0,i.parseResources)(this,this.cache.json.get("resources_main"))}))}create(e){(0,r.PlayerAnims)(this),(0,a.MainAnims)(this),this.scene.run("MainMenu",e),this.scene.stop("Preload")}}t.Preload=o},939:function(e,t){"use strict";var s=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.MainMenu=void 0;class n extends Phaser.Scene{constructor(){super("MainMenu")}create(e){return s(this,void 0,void 0,(function*(){this.data=e,this.cameras.main.fadeIn(3e3).setBackgroundColor(0).centerOn(this.scale.width/2,this.scale.height/2);const t=this.add.sprite(this.scale.width/2,this.scale.height/2-100,"swanky_velvet").play("swanky_dance"),s=this.add.text(t.x-170,t.y+150,"START GAME",{fontSize:"3rem",fontFamily:"Digitizer"});this.time.delayedCall(500,(()=>{this.tweens.add({targets:s,alpha:0,duration:1500,ease:"Sine.easeOut",repeat:-1,yoyo:!0}),this.input.keyboard.once("keydown",(()=>this.startGame())),this.input.once("pointerdown",(()=>this.startGame()))}))}))}startGame(){this.scene.run("GamePlay",this.data),this.scene.stop("MainMenu")}}t.MainMenu=n},402:function(e,t,s){"use strict";var n=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SpawnManager=void 0;const i=s(955),r=s(87),a=s(663);class o{static init(e){return n(this,void 0,void 0,(function*(){const t=yield i.System.Process.app.game.spawns.spawnPlayer(e),s=t[0],n=t[1],r=t[2],a=t[3],c="overworld"===i.System.Process.app.game.levelType?new i.System.Process.app.game.playerOverworld(e,s,n,r,a):new i.System.Process.app.game.playerPlatformer(e,100,430,!1,"");e.cameras.main.startFollow(c),e.physics.add.overlap(i.System.Process.app.game.groups.player,i.System.Process.app.game.groups.door,((t,s)=>o.spawnMap(e,s)))}))}}t.SpawnManager=o,o.spawnPlayer=a.spawnPlayer,o.spawnMap=r.mapSpawns},87:function(e,t){"use strict";var s=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.mapSpawns=void 0,t.mapSpawns=function(e,t){return s(this,void 0,void 0,(function*(){const n=yield(()=>s(this,void 0,void 0,(function*(){switch(e.data.currentStage){case"Cave_Overworld":switch(t.name){case"door1":return"door7";case"door2":return"door6";case"door3":case"door4":case"door5":return"";case"door6":return"door2";case"door7":return"door1";case"door8":return"Cave_Platformer";default:return"start"}case"Cave_Platformer":case"Bar_Overworld":return"start"}})))();e.data.spawnPoint=n,((null==n?void 0:n.includes("Platformer"))||(null==n?void 0:n.includes("Overworld")))&&(e.data.currentStage=n),e.scene.restart(e.data)}))}},663:function(e,t){"use strict";var s=this&&this.__awaiter||function(e,t,s,n){return new(s||(s=Promise))((function(i,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.spawnPlayer=void 0,t.spawnPlayer=function(e){return s(this,void 0,void 0,(function*(){switch(e.data.currentStage){case"Cave_Overworld":switch(e.data.spawnPoint){case"start":return[150,816,!1,"sv_idleFront"];case"door1":return[304,1066,!1,"sv_idleFront"];case"door2":return[608,982,!1,"sv_idleFront"];case"door3":return[608,932,!1,"sv_idleFront"];case"door4":return[1232,11460,!1,"sv_idleFront"];case"door5":return[1392,308,!1,"sv_idleFront"];case"door6":return[608,604,!1,"sv_idleBack"];case"door7":return[394,584,!1,"sv_idleBack"];case"door8":return[192,436,!1,"sv_idleFront"]}break;case"Bar_Overworld":if("start"===e.data.spawnPoint)return[150,816,!1,"sv_idleFront"];break;default:return[0,0,"down"]}}))}},575:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Bar_Overworld=void 0,t.Bar_Overworld=function(e){}},956:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cave_Overworld=void 0,t.Cave_Overworld=function(e){}},271:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Cave_Platformer=void 0,t.Cave_Platformer=function(e){}},839:function(e){e.exports=function(){"use strict";function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function t(e,t){for(var s=0;s<t.length;s++){var n=t[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function s(e,s,n){return s&&t(e.prototype,s),n&&t(e,n),e}function n(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&r(e,t)}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function a(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var s,n=i(e);if(t){var r=i(this).constructor;s=Reflect.construct(n,arguments,r)}else s=n.apply(this,arguments);return a(this,s)}}function c(e,t,s){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,s){var n=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=i(e)););return e}(e,t);if(n){var r=Object.getOwnPropertyDescriptor(n,t);return r.get?r.get.call(s):r.value}})(e,t,s||e)}var u=Phaser.Input.Keyboard.Key,l=Phaser.Input.Keyboard.KeyCodes,h=function(){function t(s){e(this,t),this.cursorKeys={up:new u(s,l.UP),down:new u(s,l.DOWN),left:new u(s,l.LEFT),right:new u(s,l.RIGHT)},this.noKeyDown=!0}return s(t,[{key:"shutdown",value:function(){for(var e in this.cursorKeys)this.cursorKeys[e].destroy();this.cursorKeys=void 0}},{key:"destroy",value:function(e){shutdown(e)}},{key:"createCursorKeys",value:function(){return this.cursorKeys}},{key:"setKeyState",value:function(e,t){var s=this.cursorKeys[e];return s.enabled&&(t&&(this.noKeyDown=!1),s.isDown!==t&&(d.timeStamp=Date.now(),t?s.onDown(d):s.onUp(d))),this}},{key:"clearAllKeysState",value:function(){for(var e in this.noKeyDown=!0,this.cursorKeys)this.setKeyState(e,!1);return this}},{key:"getKeyState",value:function(e){return this.cursorKeys[e]}},{key:"upKeyDown",get:function(){return this.cursorKeys.up.isDown}},{key:"downKeyDown",get:function(){return this.cursorKeys.down.isDown}},{key:"leftKeyDown",get:function(){return this.cursorKeys.left.isDown}},{key:"rightKeyDown",get:function(){return this.cursorKeys.right.isDown}},{key:"anyKeyDown",get:function(){return!this.noKeyDown}}]),t}(),d={altKey:!1,ctrlKey:!1,shiftKey:!1,metaKey:!1,location:0},p=180/Math.PI,m={"up&down":0,"left&right":1,"4dir":2,"8dir":3},y={},f=Phaser.Utils.Objects.GetValue,v=Phaser.Math.Distance.Between,g=Phaser.Math.Angle.Between,w=function(){n(i,h);var t=o(i);function i(s,n){var r;return e(this,i),(r=t.call(this,s)).resetFromJSON(n),r}return s(i,[{key:"resetFromJSON",value:function(e){null==this.start&&(this.start={}),null==this.end&&(this.end={}),this._enable=void 0,this.setEnable(f(e,"enable",!0)),this.setMode(f(e,"dir","8dir")),this.setDistanceThreshold(f(e,"forceMin",16));var t=f(e,"start.x",null),s=f(e,"start.y",null),n=f(e,"end.x",null),i=f(e,"end.y",null);return this.setVector(t,s,n,i),this}},{key:"toJSON",value:function(){return{enable:this.enable,dir:this.dirMode,forceMin:this.forceMin,start:{x:this.start.x,y:this.start.y},end:{x:this.end.x,y:this.end.y}}}},{key:"setMode",value:function(e){return"string"==typeof e&&(e=m[e]),this.dirMode=e,this}},{key:"enable",get:function(){return this._enable},set:function(e){if(this._enable!==e)return e||this.clearVector(),this._enable=e,this}},{key:"setEnable",value:function(e){return void 0===e&&(e=!0),this.enable=e,this}},{key:"toggleEnable",value:function(){return this.setEnable(!this.enable),this}},{key:"setDistanceThreshold",value:function(e){return e<0&&(e=0),this.forceMin=e,this}},{key:"clearVector",value:function(){return this.start.x=0,this.start.y=0,this.end.x=0,this.end.y=0,this.clearAllKeysState(),this}},{key:"setVector",value:function(e,t,s,n){if(this.clearVector(),!this.enable)return this;if(null===e)return this;if(void 0===s&&(s=e,n=t,t=e=0),this.start.x=e,this.start.y=t,this.end.x=s,this.end.y=n,0<this.forceMin&&this.force<this.forceMin)return this;var i=function(e,t,s){switch(void 0===s?s={}:!0===s&&(s=y),s.left=!1,s.right=!1,s.up=!1,s.down=!1,e=(e+360)%360,t){case 0:e<180?s.down=!0:s.up=!0;break;case 1:90<e&&e<=270?s.left=!0:s.right=!0;break;case 2:45<e&&e<=135?s.down=!0:135<e&&e<=225?s.left=!0:225<e&&e<=315?s.up=!0:s.right=!0;break;case 3:22.5<e&&e<=67.5?(s.down=!0,s.right=!0):67.5<e&&e<=112.5?s.down=!0:112.5<e&&e<=157.5?(s.down=!0,s.left=!0):157.5<e&&e<=202.5?s.left=!0:202.5<e&&e<=247.5?(s.left=!0,s.up=!0):247.5<e&&e<=292.5?s.up=!0:(292.5<e&&e<=337.5&&(s.up=!0),s.right=!0)}return s}(this.angle,this.dirMode,!0);for(var r in i)i[r]&&this.setKeyState(r,!0);return this}},{key:"forceX",get:function(){return this.end.x-this.start.x}},{key:"forceY",get:function(){return this.end.y-this.start.y}},{key:"force",get:function(){return v(this.start.x,this.start.y,this.end.x,this.end.y)}},{key:"rotation",get:function(){return g(this.start.x,this.start.y,this.end.x,this.end.y)}},{key:"angle",get:function(){return this.rotation*p}},{key:"octant",get:function(){var e=0;return this.rightKeyDown?e=this.downKeyDown?45:0:this.downKeyDown?e=this.leftKeyDown?135:90:this.leftKeyDown?e=this.upKeyDown?225:180:this.upKeyDown&&(e=this.rightKeyDown?315:270),e}}]),i}(),b={setEventEmitter:function(e,t){return void 0===t&&(t=Phaser.Events.EventEmitter),this._privateEE=!0===e||void 0===e,this._eventEmitter=this._privateEE?new t:e,this},destroyEventEmitter:function(){return this._eventEmitter&&this._privateEE&&this._eventEmitter.shutdown(),this},getEventEmitter:function(){return this._eventEmitter},on:function(){return this._eventEmitter&&this._eventEmitter.on.apply(this._eventEmitter,arguments),this},once:function(){return this._eventEmitter&&this._eventEmitter.once.apply(this._eventEmitter,arguments),this},off:function(){return this._eventEmitter&&this._eventEmitter.off.apply(this._eventEmitter,arguments),this},emit:function(e){return this._eventEmitter&&e&&this._eventEmitter.emit.apply(this._eventEmitter,arguments),this},addListener:function(){return this._eventEmitter&&this._eventEmitter.addListener.apply(this._eventEmitter,arguments),this},removeListener:function(){return this._eventEmitter&&this._eventEmitter.removeListener.apply(this._eventEmitter,arguments),this},removeAllListeners:function(){return this._eventEmitter&&this._eventEmitter.removeAllListeners.apply(this._eventEmitter,arguments),this},listenerCount:function(){return this._eventEmitter?this._eventEmitter.listenerCount.apply(this._eventEmitter,arguments):0},listeners:function(){return this._eventEmitter?this._eventEmitter.listeners.apply(this._eventEmitter,arguments):[]},eventNames:function(){return this._eventEmitter?this._eventEmitter.eventNames.apply(this._eventEmitter,arguments):[]}},_=Phaser.Utils.Objects.GetValue,k=Phaser.Geom.Circle,P=Phaser.Geom.Circle.Contains,S=function(){n(r,w);var t=o(r);function r(s,n){var i;e(this,r);var a=s.scene;i=t.call(this,a,n);var o=_(n,"eventEmitter",void 0),c=_(n,"EventEmitterClass",void 0);return i.setEventEmitter(o,c),i.scene=a,i.gameObject=s,i.radius=_(n,"radius",100),s.setInteractive(new k(s.displayOriginX,s.displayOriginY,i.radius),P),i.boot(),i}return s(r,[{key:"resetFromJSON",value:function(e){return c(i(r.prototype),"resetFromJSON",this).call(this,e),this.pointer=void 0,this}},{key:"toJSON",value:function(){var e=c(i(r.prototype),"toJSON",this).call(this);return e.radius=this.radius,e}},{key:"boot",value:function(){this.gameObject.on("pointerdown",this.onKeyDownStart,this),this.gameObject.on("pointerover",this.onKeyDownStart,this),this.scene.input.on("pointermove",this.onKeyDown,this),this.scene.input.on("pointerup",this.onKeyUp,this),this.gameObject.once("destroy",this.onParentDestroy,this)}},{key:"shutdown",value:function(){this.scene&&(this.scene.input.off("pointermove",this.onKeyDown,this),this.scene.input.off("pointerup",this.onKeyUp,this),this.destroyEventEmitter(),this.pointer=void 0,this.scene=void 0,this.gameObject=void 0,c(i(r.prototype),"shutdown",this).call(this))}},{key:"destroy",value:function(e){this.shutdown(e)}},{key:"onParentDestroy",value:function(e,t){this.destroy(t)}},{key:"onKeyDownStart",value:function(e){e.isDown&&void 0===this.pointer&&(this.pointer=e,this.onKeyDown(e))}},{key:"onKeyDown",value:function(e){this.pointer===e&&e.camera&&(this.setVector(this.gameObject.x+e.camera.scrollX,this.gameObject.y+e.camera.scrollY,e.worldX,e.worldY),this.emit("update"))}},{key:"onKeyUp",value:function(e){this.pointer===e&&(this.pointer=void 0,this.clearVector(),this.emit("update"))}}]),r}();Object.assign(S.prototype,b);var C=Phaser.Utils.Objects.GetValue,M=function(){function t(s,n){e(this,t),void 0===n&&(n={});var i=C(n,"eventEmitter",void 0),r=C(n,"EventEmitterClass",void 0);this.setEventEmitter(i,r),n.eventEmitter=this.getEventEmitter(),this.scene=s,this.base=void 0,this.thumb=void 0,this.touchCursor=void 0,this.setRadius(C(n,"radius",100)),this.addBase(C(n,"base",void 0),n),this.addThumb(C(n,"thumb",void 0));var a=C(n,"x",0),o=C(n,"y",0);this.base.setPosition(a,o),this.thumb.setPosition(a,o),C(n,"fixed",!0)&&this.setScrollFactor(0),this.boot()}return s(t,[{key:"destroy",value:function(){this.destroyEventEmitter(),this.base.destroy(),this.thumb.destroy(),this.base=void 0,this.thumb=void 0,this.touchCursor=void 0}},{key:"createCursorKeys",value:function(){return this.touchCursor.createCursorKeys()}},{key:"forceX",get:function(){return this.touchCursor.forceX}},{key:"forceY",get:function(){return this.touchCursor.forceY}},{key:"force",get:function(){return this.touchCursor.force}},{key:"rotation",get:function(){return this.touchCursor.rotation}},{key:"angle",get:function(){return this.touchCursor.angle}},{key:"up",get:function(){return this.touchCursor.upKeyDown}},{key:"down",get:function(){return this.touchCursor.downKeyDown}},{key:"left",get:function(){return this.touchCursor.leftKeyDown}},{key:"right",get:function(){return this.touchCursor.rightKeyDown}},{key:"noKey",get:function(){return this.touchCursor.noKeyDown}},{key:"pointerX",get:function(){return this.touchCursor.end.x}},{key:"pointerY",get:function(){return this.touchCursor.end.y}},{key:"pointer",get:function(){return this.touchCursor.pointer}},{key:"setPosition",value:function(e,t){return this.x=e,this.y=t,this}},{key:"x",get:function(){return this.base.x},set:function(e){this.base.x=e,this.thumb.x=e}},{key:"y",get:function(){return this.base.y},set:function(e){this.base.y=e,this.thumb.y=e}},{key:"setVisible",value:function(e){return this.visible=e,this}},{key:"toggleVisible",value:function(){return this.visible=!this.visible,this}},{key:"visible",get:function(){return this.base.visible},set:function(e){this.base.visible=e,this.thumb.visible=e}},{key:"enable",get:function(){return this.touchCursor.enable},set:function(e){this.touchCursor.setEnable(e)}},{key:"setEnable",value:function(e){return void 0===e&&(e=!0),this.enable=e,this}},{key:"toggleEnable",value:function(){return this.setEnable(!this.enable),this}},{key:"setRadius",value:function(e){return this.radius=e,this}},{key:"addBase",value:function(e,t){return this.base&&this.base.destroy(),void 0===e&&(e=this.scene.add.circle(0,0,this.radius).setStrokeStyle(3,255)),this.touchCursor=new S(e,t),this.base=e,this}},{key:"addThumb",value:function(e){return this.thumb&&this.thumb.destroy(),void 0===e&&(e=this.scene.add.circle(0,0,40).setStrokeStyle(3,65280)),this.thumb=e,this}},{key:"setScrollFactor",value:function(e){return this.base.setScrollFactor(e),this.thumb.setScrollFactor(e),this}},{key:"boot",value:function(){this.touchCursor.on("update",this.update,this)}},{key:"update",value:function(){var e=this.touchCursor,t=this.base.x,s=this.base.y;if(e.anyKeyDown)if(e.force>this.radius){var n=e.rotation;t+=Math.cos(n)*this.radius,s+=Math.sin(n)*this.radius}else t+=e.forceX,s+=e.forceY;return this.thumb.x=t,this.thumb.y=s,this}}]),t}();return Object.assign(M.prototype,b),function(){n(i,Phaser.Plugins.BasePlugin);var t=o(i);function i(s){return e(this,i),t.call(this,s)}return s(i,[{key:"start",value:function(){this.game.events.on("destroy",this.destroy,this)}},{key:"add",value:function(e,t){return new M(e,t)}}]),i}()}()},204:()=>{console.log("%c %c %c %c %c Built using phaser-project-template %c https://github.com/yandeu/phaser-project-template","background: #ff0000","background: #ffff00","background: #00ff00","background: #00ffff","color: #fff; background: #000000;","background: none")},656:(e,t,s)=>{"use strict";s.d(t,{Z:()=>d});var n=s(559),i=s.n(n),r=s(476),a=s.n(r),o=s(678),c=s.n(o),u=new URL(s(441),s.b),l=a()(i()),h=c()(u);l.push([e.id,'\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n  margin: 0;\r\n  background-color: #000000;\r\n}\r\n\r\n\r\n@font-face {\r\n\tfont-family:  "Digitizer";\r\n\tsrc: url('+h+') format("woff");\r\n}\r\n\r\n\r\n/**********************************************  MEDIA QUERIES */\r\n\r\n\r\n@media screen and (orientation: portrait)\r\n{\r\n\r\n}\r\n@media screen and (orientation: landscape)\r\n{\r\n\r\n}\r\n@media screen and (min-width: 1030px) /* desktop only */\r\n{\r\n\r\n\t#game > canvas{\r\n\t\tbackground-color: #000000;\r\n\t\tbox-shadow: 0 0 85px #000000;\r\n\t}\r\n}',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:";AACA;;EAEE,YAAY;EACZ,SAAS;EACT,yBAAyB;AAC3B;;;AAGA;CACC,yBAAyB;CACzB,2DAAsD;AACvD;;;AAGA,gEAAgE;;;AAGhE;;;AAGA;AACA;;;AAGA;AACA;;;CAGC;EACC,yBAAyB;EACzB,4BAA4B;CAC7B;AACD",sourcesContent:['\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n  margin: 0;\r\n  background-color: #000000;\r\n}\r\n\r\n\r\n@font-face {\r\n\tfont-family:  "Digitizer";\r\n\tsrc: url("assets/fonts/digitizer.woff") format("woff");\r\n}\r\n\r\n\r\n/**********************************************  MEDIA QUERIES */\r\n\r\n\r\n@media screen and (orientation: portrait)\r\n{\r\n\r\n}\r\n@media screen and (orientation: landscape)\r\n{\r\n\r\n}\r\n@media screen and (min-width: 1030px) /* desktop only */\r\n{\r\n\r\n\t#game > canvas{\r\n\t\tbackground-color: #000000;\r\n\t\tbox-shadow: 0 0 85px #000000;\r\n\t}\r\n}'],sourceRoot:""}]);const d=l},441:(e,t,s)=>{"use strict";e.exports=s.p+"1ab499bde69e43d3a5ca.woff"},782:e=>{"use strict";e.exports=JSON.parse('{"image":[{"tiles":"assets/maps/overworld/tiles.png"},{"bar venue good":"assets/maps/overworld/bar-venue-good.png"},{"platformer":"assets/maps/platformer/platformer.png"},{"background":"assets/maps/platformer/background.png"}],"atlas":[{"player":["assets/player/player.png","assets/player/player.json"]},{"swanky_velvet":["assets/swanky_velvet.png","assets/swanky_velvet.json"]}],"tilemapTiledJSON":[{"Bar_Overworld":"assets/maps/overworld/bar.json"},{"Cave_Overworld":"assets/maps/overworld/cave.json"},{"Cave_Platformer":"assets/maps/platformer/cave.json"}]}')}},s={};function n(e){var i=s[e];if(void 0!==i)return i.exports;var r=s[e]={id:e,exports:{}};return t[e].call(r.exports,r,r.exports,n),r.exports}n.m=t,e=[],n.O=(t,s,i,r)=>{if(!s){var a=1/0;for(l=0;l<e.length;l++){for(var[s,i,r]=e[l],o=!0,c=0;c<s.length;c++)(!1&r||a>=r)&&Object.keys(n.O).every((e=>n.O[e](s[c])))?s.splice(c--,1):(o=!1,r<a&&(a=r));if(o){e.splice(l--,1);var u=i();void 0!==u&&(t=u)}}return t}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[s,i,r]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var s=t.getElementsByTagName("script");s.length&&(e=s[s.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{n.b=document.baseURI||self.location.href;var e={179:0};n.O.j=t=>0===e[t];var t=(t,s)=>{var i,r,[a,o,c]=s,u=0;if(a.some((t=>0!==e[t]))){for(i in o)n.o(o,i)&&(n.m[i]=o[i]);if(c)var l=c(n)}for(t&&t(s);u<a.length;u++)r=a[u],n.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return n.O(l)},s=self.webpackChunkphaser_project_template=self.webpackChunkphaser_project_template||[];s.forEach(t.bind(null,0)),s.push=t.bind(null,s.push.bind(s))})(),n.nc=void 0,n.O(void 0,[216],(()=>n(666)));var i=n.O(void 0,[216],(()=>n(204)));i=n.O(i)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,